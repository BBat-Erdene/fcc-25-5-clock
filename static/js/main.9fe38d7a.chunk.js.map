{"version":3,"sources":["app/hooks.ts","features/timerSlice.ts","components/BreakLength.tsx","components/SessionLength.tsx","components/Timer.tsx","components/TimerControl.tsx","components/Title.tsx","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","now","Date","getTime","initialState","inSession","interval","undefined","break","session","timer","future","timerSlice","createSlice","name","reducers","incrementBreak","state","decrementBreak","incrementSession","decrementSession","decrementFuture","setTimerInterval","action","payload","reset","clearInterval","actions","selectBreak","selectSession","selectCountdown","diff","diffTime","minutes","getMinutes","getSeconds","seconds","selectInterval","selectInSession","BreakLength","dispatch","breakValue","className","id","onClick","SessionLength","Timer","toString","padStart","TimerControl","timerInterval","setInterval","Title","App","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fe38d7a.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../app/store\";\nconst now = new Date().getTime()\nconst future = now + 25 * 60 * 1000\n\nconst initialState = {\n  inSession: true,\n  interval: undefined as number | undefined,\n  break: 5,\n  session: 25,\n  timer: {\n    now,\n    future,\n  },\n}\n\nexport const timerSlice = createSlice({\n  name: 'timer',\n  initialState,\n  reducers: {\n    incrementBreak: (state) => {\n      if (state.break < 60) {\n        state.break += 1\n      }\n    },\n    decrementBreak: (state) => {\n      if (state.break > 1) {\n        state.break -= 1\n      }\n    },\n    incrementSession: (state) => {\n      if (state.session < 60) {\n        state.session += 1\n        state.timer.future = state.timer.now + state.session * 60 * 1000\n      }\n    },\n    decrementSession: (state) => {\n      if (state.session > 1) {\n        state.session -= 1\n      }\n      state.timer.future = state.timer.now + state.session * 60 * 1000\n    },\n    decrementFuture: (state) => {\n      if (state.timer.future !== state.timer.now) {\n        state.timer.future = state.timer.future - 1 * 1000\n      } else {\n        state.inSession = !state.inSession\n        if (state.inSession) {\n          state.timer.now = new Date().getTime()\n          state.timer.future = state.timer.now + state.session * 60 * 1000\n        } else {\n          state.timer.now = new Date().getTime()\n          state.timer.future = state.timer.now + state.break * 60 * 1000\n        }\n      }\n    },\n    setTimerInterval: (state, action) => {\n      state.interval = action.payload\n    },\n    reset: (state) => {\n      clearInterval(state.interval)\n      return initialState\n    }\n  },\n})\n\nexport const {\n  incrementBreak,\n  decrementBreak,\n  incrementSession,\n  decrementSession,\n  decrementFuture,\n  setTimerInterval,\n  reset,\n} = timerSlice.actions\n\nexport const selectBreak = (state: RootState) => state.timer.break\nexport const selectSession = (state: RootState) => state.timer.session\nexport const selectCountdown = (state: RootState) => {\n  const diff = state.timer.timer.future - state.timer.timer.now\n  const diffTime = new Date(diff)\n  let minutes\n  if ( diffTime.getMinutes() === 0 && diffTime.getSeconds() === 0 && diff !== 0) {\n    minutes = 60\n  } else {\n    minutes = diffTime.getMinutes()\n  }\n  return {\n    minutes,\n    seconds: diffTime.getSeconds(),\n  }\n}\nexport const selectInterval = (state: RootState) => state.timer.interval\nexport const selectInSession = (state: RootState) => state.timer.inSession\nexport default timerSlice.reducer;","import { FaArrowUp, FaArrowDown } from 'react-icons/fa'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { decrementBreak, incrementBreak, selectBreak, selectInterval } from '../features/timerSlice'\n\nexport const BreakLength = () => {\n  const dispatch = useAppDispatch()\n  const breakValue = useAppSelector(selectBreak)\n  const interval = useAppSelector(selectInterval)\n\n  const handleUpClick = () => {\n    if (!interval) dispatch(incrementBreak())\n  }\n\n  const handleDownClick = () => {\n    if (!interval) dispatch(decrementBreak())\n  }\n\n  return (\n    <div className=\"flex flex-col text-xl py-1 items-center md:mr-4\">\n      <div id=\"break-label\">\n        Break Length\n      </div>\n      <div className=\"flex justify-center items-center\">\n        <FaArrowUp className=\"cursor-pointer\" onClick={handleUpClick} id=\"break-increment\"/>\n        <span className=\"mx-2\" id=\"break-length\">{breakValue}</span>\n        <FaArrowDown className=\"cursor-pointer\" onClick={handleDownClick} id=\"break-decrement\"/>\n      </div>\n    </div>\n  )\n}\n","import { FaArrowUp, FaArrowDown } from 'react-icons/fa'\nimport { useAppDispatch, useAppSelector } from '../app/hooks'\nimport { decrementSession, incrementSession, selectInterval, selectSession } from '../features/timerSlice'\n\nexport const SessionLength = () => {\n  const dispatch = useAppDispatch()\n  const session = useAppSelector(selectSession)\n  const interval = useAppSelector(selectInterval)\n\n  const handleUpClick = () => {\n    if (!interval) dispatch(incrementSession())\n  }\n\n  const handleDownClick = () => {\n    if (!interval) dispatch(decrementSession())\n  }\n\n  return (\n    <div className=\"flex flex-col text-xl py-1 items-center md:ml-4\">\n      <div id=\"session-length\">\n        Session Length\n      </div>\n      <div className=\"flex justify-center items-center\">\n        <FaArrowUp className=\"cursor-pointer\" onClick={handleUpClick} id=\"session-increment\"/>\n        <span className=\"mx-2\" id=\"session-length\">{session}</span>\n        <FaArrowDown className=\"cursor-pointer\" onClick={handleDownClick} id=\"session-decrement\"/>\n      </div>\n    </div>\n  )\n}\n","\nimport { useAppSelector } from \"../app/hooks\"\nimport { selectCountdown, selectInSession } from \"../features/timerSlice\"\n\nexport const Timer = () => {\n  const timer = useAppSelector(selectCountdown)\n  const inSession = useAppSelector(selectInSession)\n  return (\n    <div className={`flex flex-col items-center rounded-4xl border-8 py-4 px-6 my-2 ${timer.minutes === 0 ? 'text-red-500' : ''}`}>\n      <div className=\"text-xl\" id=\"timer-label\">\n        {inSession ? 'Session' : 'Break'}\n      </div>\n      <div className=\"text-6xl\" id=\"time-left\">\n        {`${timer.minutes.toString().padStart(2, '0')}:${timer.seconds.toString().padStart(2, '0')}`}\n      </div>\n    </div>\n  )\n}\n","import { IoMdPause, IoMdPlay, IoMdRefresh } from \"react-icons/io\"\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\"\nimport { decrementFuture, reset, selectInterval, setTimerInterval } from \"../features/timerSlice\"\n\nexport const TimerControl = () => {\n  const dispatch = useAppDispatch()\n  const interval = useAppSelector(selectInterval)\n\n  const handlePlay = () => {\n    if ( !interval ) {\n      const timerInterval = setInterval(() => {\n        dispatch(decrementFuture())\n      }, 1000)\n      dispatch(setTimerInterval(timerInterval))\n    }\n  }\n\n  const handlePause = () => {\n    clearInterval(interval)\n    dispatch(setTimerInterval(undefined))\n  }\n\n  const handleRefresh = () => {\n    dispatch(reset())\n  }\n\n  return (\n    <div className=\"flex text-2xl mt-2\">\n      <IoMdPlay className=\"cursor-pointer\" onClick={handlePlay}/>\n      <IoMdPause className=\"cursor-pointer mx-2\" onClick={handlePause}/>\n      <IoMdRefresh className=\"cursor-pointer\" onClick={handleRefresh} id=\"reset\"/>\n    </div>\n  )\n}\n","\n\nexport const Title = () => {\n  return (\n    <div className=\"text-6xl mb-4 font-monte-carlo\">\n      25 + 5 Pomodoro Clock\n    </div>\n  )\n}\n","import { BreakLength } from \"./components/BreakLength\";\nimport { SessionLength } from \"./components/SessionLength\";\nimport { Timer } from \"./components/Timer\";\nimport { TimerControl } from \"./components/TimerControl\";\nimport { Title } from \"./components/Title\";\n\nfunction App() {\n  return (\n    <div className=\"App bg-astronaut-blue w-full h-full text-white flex absolute flex-col justify-center items-center select-none text-center md:transform md:scale-125 min-w-xs\">\n      <Title />\n      <div className=\"flex flex-col font-medium md:flex-row\">\n        <BreakLength />\n        <SessionLength />\n      </div>\n      <Timer />\n      <TimerControl />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport timerSlice from '../features/timerSlice';\n\nexport const store = configureStore({\n  reducer: {\n    'timer': timerSlice,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}